{"remainingRequest":"/home/dickson/PersonalProjects/britecore/britecore_test/frontend/node_modules/babel-loader/lib/index.js!/home/dickson/PersonalProjects/britecore/britecore_test/frontend/node_modules/eslint-loader/index.js??ref--13-0!/home/dickson/PersonalProjects/britecore/britecore_test/frontend/src/BackendApiService.js","dependencies":[{"path":"/home/dickson/PersonalProjects/britecore/britecore_test/frontend/src/BackendApiService.js","mtime":1565768124832},{"path":"/home/dickson/PersonalProjects/britecore/britecore_test/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/dickson/PersonalProjects/britecore/britecore_test/frontend/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/dickson/PersonalProjects/britecore/britecore_test/frontend/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/web.dom.iterable\";\nimport _classCallCheck from \"/home/dickson/PersonalProjects/britecore/britecore_test/frontend/node_modules/@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/dickson/PersonalProjects/britecore/britecore_test/frontend/node_modules/@babel/runtime-corejs2/helpers/esm/createClass\";\nimport axios from \"axios\";\nimport api_url from \"./constants.js\";\nvar API_URL = api_url.DEV; // change when in production to api_url.PROD\n\nexport var APIService =\n/*#__PURE__*/\nfunction () {\n  function APIService() {\n    _classCallCheck(this, APIService);\n  }\n\n  _createClass(APIService, [{\n    key: \"getUser\",\n    value: function getUser(email) {\n      var url = \"\".concat(API_URL, \"/api/find/\").concat(email, \"/\");\n      var response = axios.get(url);\n      return response;\n    }\n  }, {\n    key: \"createUser\",\n    value: function createUser(email) {\n      var url = \"\".concat(API_URL, \"/api/register/\");\n      var response = axios.post(url, {\n        email: email\n      });\n      return response;\n    }\n  }, {\n    key: \"getCategory\",\n    value: function getCategory(user_id) {\n      var url = \"\".concat(API_URL, \"/api/GetCategory/\").concat(user_id, \"/\");\n      var response = axios.get(url);\n      return response;\n    }\n  }, {\n    key: \"getFavThings\",\n    value: function getFavThings(category, user) {\n      var url = \"\".concat(API_URL, \"/api/GetFavThings/\").concat(category, \"/\").concat(user, \"/\");\n      var response = axios.get(url);\n      return response;\n    }\n  }, {\n    key: \"createCategory\",\n    value: function createCategory(category) {\n      var url = \"\".concat(API_URL, \"/api/CategoryCreate/\");\n      var response = axios.post(url, category);\n      return response;\n    }\n  }, {\n    key: \"createThing\",\n    value: function createThing(thing) {\n      var url = \"\".concat(API_URL, \"/api/CreateThing/\");\n      var response = axios.post(url, thing);\n      return response;\n    }\n  }, {\n    key: \"updateThing\",\n    value: function updateThing(thing) {\n      var url = \"\".concat(API_URL, \"/api/UpdateThing/\").concat(thing.id, \"/\");\n      var response = axios.put(url, thing);\n      return response;\n    }\n  }, {\n    key: \"deleteThing\",\n    value: function deleteThing(thing) {\n      var url = \"\".concat(API_URL, \"/api/DestroyThing/\").concat(thing.id, \"/\");\n      var response = axios.delete(url, thing);\n      return response;\n    }\n  }, {\n    key: \"getLogs\",\n    value: function getLogs(user_id) {\n      var url = \"\".concat(API_URL, \"/api/GetLog/\").concat(user_id, \"/\");\n      var response = axios.get(url);\n      return response;\n    }\n  }, {\n    key: \"prepareMeta\",\n    value: function prepareMeta(arr) {\n      // function to prepare the metadata and send it back to the backend\n      var met_str = \"\";\n      arr.forEach(function (item) {\n        if (item.key != \"\" && item.value != \"\") {\n          met_str = met_str + '{\"key\":\"' + item.key + '\", \"value\":\"' + item.value + '\"},';\n        }\n      });\n      met_str = met_str.substring(0, met_str.length - 1);\n      met_str = \"[\" + met_str + \"]\";\n      return met_str;\n    }\n  }]);\n\n  return APIService;\n}();",{"version":3,"sources":["/home/dickson/PersonalProjects/britecore/britecore_test/frontend/src/BackendApiService.js"],"names":["axios","api_url","API_URL","DEV","APIService","email","url","response","get","post","user_id","category","user","thing","id","put","delete","arr","met_str","forEach","item","key","value","substring","length"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport api_url from \"./constants.js\";\nconst API_URL = api_url.DEV; // change when in production to api_url.PROD\nexport class APIService {\n  constructor() {}\n\n  getUser(email) {\n    const url = `${API_URL}/api/find/${email}/`;\n    const response = axios.get(url);\n    return response;\n  }\n\n  createUser(email) {\n    const url = `${API_URL}/api/register/`;\n    const response = axios.post(url, { email });\n    return response;\n  }\n\n  getCategory(user_id) {\n    const url = `${API_URL}/api/GetCategory/${user_id}/`;\n    const response = axios.get(url);\n    return response;\n  }\n\n  getFavThings(category, user) {\n    const url = `${API_URL}/api/GetFavThings/${category}/${user}/`;\n    const response = axios.get(url);\n    return response;\n  }\n\n  createCategory(category) {\n    const url = `${API_URL}/api/CategoryCreate/`;\n    const response = axios.post(url, category);\n    return response;\n  }\n\n  createThing(thing) {\n    const url = `${API_URL}/api/CreateThing/`;\n    const response = axios.post(url, thing);\n    return response;\n  }\n\n  updateThing(thing) {\n    const url = `${API_URL}/api/UpdateThing/${thing.id}/`;\n    const response = axios.put(url, thing);\n    return response;\n  }\n\n  deleteThing(thing) {\n    const url = `${API_URL}/api/DestroyThing/${thing.id}/`;\n    const response = axios.delete(url, thing);\n    return response;\n  }\n\n  getLogs(user_id) {\n    const url = `${API_URL}/api/GetLog/${user_id}/`;\n    const response = axios.get(url);\n    return response;\n  }\n\n  prepareMeta(arr) {\n    // function to prepare the metadata and send it back to the backend\n    let met_str = \"\";\n    arr.forEach(item => {\n      if (item.key != \"\" && item.value != \"\") {\n        met_str =\n          met_str + '{\"key\":\"' + item.key + '\", \"value\":\"' + item.value + '\"},';\n      }\n    });\n    met_str = met_str.substring(0, met_str.length - 1);\n    met_str = \"[\" + met_str + \"]\";\n    return met_str;\n  }\n}\n"]}]}