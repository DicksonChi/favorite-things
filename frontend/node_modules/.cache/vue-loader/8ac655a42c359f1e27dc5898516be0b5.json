{"remainingRequest":"/home/dickson/PersonalProjects/britecore/britecore_test/frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/dickson/PersonalProjects/britecore/britecore_test/frontend/src/components/CategoryItem.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/dickson/PersonalProjects/britecore/britecore_test/frontend/src/components/CategoryItem.vue","mtime":1565730616475},{"path":"/home/dickson/PersonalProjects/britecore/britecore_test/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/dickson/PersonalProjects/britecore/britecore_test/frontend/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/dickson/PersonalProjects/britecore/britecore_test/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/dickson/PersonalProjects/britecore/britecore_test/frontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport modal from \"./modal/Modal.vue\";\nimport Favorites from \"./Favorite.vue\";\nimport { APIService } from \"../BackendApiService.js\";\nexport default {\n  name: \"CategoryItem\",\n  props: [\"category\"],\n  components: {\n    Favorites,\n    modal\n  },\n  data() {\n    return {\n      isAddModalVisible: false,\n      favorites: [],\n      viewList: true,\n      ranking: \"\",\n      title: \"\",\n      description: \"\",\n      metadata: [{ key: \"\", value: \"\" }]\n    };\n  },\n  methods: {\n    AddMetadata() {\n      this.metadata.push({ key: \"\", value: \"\" });\n    },\n    showAddModal() {\n      this.isAddModalVisible = true;\n    },\n    closeAddModal() {\n      this.isAddModalVisible = false;\n      this.metadata = [{ key: \"\", value: \"\" }];\n    },\n    updateFavorite() {\n      let api_serv = new APIService();\n      api_serv\n        .getFavThings(this.category.id, localStorage.user_id)\n        .then(res => {\n          if (res.data.code == \"010\") {\n            this.favorites = res.data.favThings;\n            this.metadata = [{ key: \"\", value: \"\" }];\n          }\n        })\n        .catch(err => {\n          console.log(err);\n        });\n      this.$emit(\"update-log\");\n    },\n    AddThingModal(e) {\n      e.preventDefault();\n      if (this.description != \"\" && this.description.length < 10) {\n        alert(\"Text length must be at least 10 characters or left empty.\");\n        return;\n      }\n      let api_serv = new APIService();\n      // prepare the string to be passed to the backend\n      const met_data = api_serv.prepareMeta(this.metadata);\n      const newThing = {\n        ranking: this.ranking,\n        title: this.title,\n        description: this.description,\n        category: this.category.id,\n        user: localStorage.user_id,\n        metadata: met_data\n      };\n      api_serv\n        .createThing(newThing)\n        .then(res => {\n          if (res.data.code == \"010\") {\n            api_serv\n              .getFavThings(this.category.id, localStorage.user_id)\n              .then(res => {\n                if (res.data.code == \"010\") {\n                  this.favorites = res.data.favThings;\n                  this.metadata = [{ key: \"\", value: \"\" }];\n                  this.ranking = \"\";\n                  this.title = \"\";\n                  this.description = \"\";\n                  //send an emit function to logs\n                  this.$emit(\"update-log\");\n                }\n              })\n              .catch(err => {\n                console.log(err);\n              });\n          }\n        })\n        .catch(err => {\n          console.log(err);\n        });\n      this.isAddModalVisible = false;\n    }\n    // other JS methods hered\n  },\n\n  created() {\n    let api_serv = new APIService();\n    api_serv\n      .getFavThings(this.category.id, localStorage.user_id)\n      .then(res => {\n        if (res.data.code == \"010\") {\n          this.favorites = res.data.favThings;\n        }\n      })\n      .catch(err => {\n        console.log(err);\n      });\n  }\n};\n",{"version":3,"sources":["CategoryItem.vue"],"names":[],"mappingsfile":"CategoryItem.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div class=\"category-item row\">\n    <modal v-if=\"isAddModalVisible\">\n      <h3 slot=\"header\" class=\"modal-title\">\n        Add a Thing to the List\n      </h3>\n\n      <div slot=\"body\">\n        <form @submit=\"AddThingModal\">\n          <div class=\"form-group\">\n            <label for=\"rank\">Rank</label>\n            <input\n              type=\"number\"\n              class=\"form-control\"\n              id=\"rank\"\n              v-model=\"ranking\"\n            />\n          </div>\n          <div class=\"form-group\">\n            <label for=\"title\">Title*</label>\n            <input\n              type=\"text\"\n              class=\"form-control\"\n              id=\"title\"\n              required\n              v-model=\"title\"\n              maxlength=\"20\"\n            />\n          </div>\n          <div class=\"form-group\">\n            <label for=\"title\">Description</label>\n            <textarea\n              type=\"text\"\n              class=\"form-control\"\n              id=\"description\"\n              v-model=\"description\"\n            >\n            </textarea>\n          </div>\n          <div>\n            <label\n              title=\"Please you are required to enter the value with keys attached\"\n              >Metadata</label\n            ><br />\n            <div class=\"form-group \">\n              <div\n                class=\"row\"\n                v-bind:key=\"index\"\n                v-for=\"(item, index) in metadata\"\n              >\n                <div class=\"col-3\">\n                  <input\n                    type=\"text\"\n                    placeholder=\"key\"\n                    class=\"form-control\"\n                    v-model=\"item.key\"\n                  />\n                </div>\n                <div class=\"col-9\">\n                  <input\n                    type=\"text\"\n                    placeholder=\"value\"\n                    class=\"form-control\"\n                    v-model=\"item.value\"\n                  />\n                </div>\n              </div>\n\n              <div class=\"row\">\n                <div class=\"col-7\"></div>\n                <div class=\"col-5 action\">\n                  <button class=\"btn btn-sm\" type=\"button\" @click=\"AddMetadata\">\n                    <i class=\"fa fa-plus\"></i> create more\n                  </button>\n                </div>\n              </div>\n            </div>\n          </div>\n          <div class=\"form-group row\">\n            <button type=\"submit\" class=\"btn btn-outline-info\">Submit</button>\n            <button\n              type=\"button\"\n              class=\"btn btn-outline-info\"\n              @click=\"closeAddModal\"\n            >\n              close\n            </button>\n          </div>\n        </form>\n      </div>\n    </modal>\n    <div class=\"col-7\">\n      <br />\n      <b>{{ category.name }}</b>\n    </div>\n    <div class=\"col-5 action\">\n      <button\n        class=\"btn\"\n        title=\"view things in this category\"\n        @click=\"viewList = !viewList\"\n      >\n        <i class=\"fa fa-bars\"> </i>\n      </button>\n      <button\n        class=\"btn\"\n        title=\"add a new thing to this category\"\n        @click=\"showAddModal\"\n      >\n        <i class=\"fa fa-plus\"></i>\n      </button>\n    </div>\n\n    <div class=\"col-12\" v-if=\"viewList\">\n      <Favorites\n        v-bind:favorites=\"favorites\"\n        v-on:update-favorite=\"updateFavorite\"\n      />\n    </div>\n  </div>\n</template>\n\n<script>\nimport modal from \"./modal/Modal.vue\";\nimport Favorites from \"./Favorite.vue\";\nimport { APIService } from \"../BackendApiService.js\";\nexport default {\n  name: \"CategoryItem\",\n  props: [\"category\"],\n  components: {\n    Favorites,\n    modal\n  },\n  data() {\n    return {\n      isAddModalVisible: false,\n      favorites: [],\n      viewList: true,\n      ranking: \"\",\n      title: \"\",\n      description: \"\",\n      metadata: [{ key: \"\", value: \"\" }]\n    };\n  },\n  methods: {\n    AddMetadata() {\n      this.metadata.push({ key: \"\", value: \"\" });\n    },\n    showAddModal() {\n      this.isAddModalVisible = true;\n    },\n    closeAddModal() {\n      this.isAddModalVisible = false;\n      this.metadata = [{ key: \"\", value: \"\" }];\n    },\n    updateFavorite() {\n      let api_serv = new APIService();\n      api_serv\n        .getFavThings(this.category.id, localStorage.user_id)\n        .then(res => {\n          if (res.data.code == \"010\") {\n            this.favorites = res.data.favThings;\n            this.metadata = [{ key: \"\", value: \"\" }];\n          }\n        })\n        .catch(err => {\n          console.log(err);\n        });\n      this.$emit(\"update-log\");\n    },\n    AddThingModal(e) {\n      e.preventDefault();\n      if (this.description != \"\" && this.description.length < 10) {\n        alert(\"Text length must be at least 10 characters or left empty.\");\n        return;\n      }\n      let api_serv = new APIService();\n      // prepare the string to be passed to the backend\n      const met_data = api_serv.prepareMeta(this.metadata);\n      const newThing = {\n        ranking: this.ranking,\n        title: this.title,\n        description: this.description,\n        category: this.category.id,\n        user: localStorage.user_id,\n        metadata: met_data\n      };\n      api_serv\n        .createThing(newThing)\n        .then(res => {\n          if (res.data.code == \"010\") {\n            api_serv\n              .getFavThings(this.category.id, localStorage.user_id)\n              .then(res => {\n                if (res.data.code == \"010\") {\n                  this.favorites = res.data.favThings;\n                  this.metadata = [{ key: \"\", value: \"\" }];\n                  this.ranking = \"\";\n                  this.title = \"\";\n                  this.description = \"\";\n                  //send an emit function to logs\n                  this.$emit(\"update-log\");\n                }\n              })\n              .catch(err => {\n                console.log(err);\n              });\n          }\n        })\n        .catch(err => {\n          console.log(err);\n        });\n      this.isAddModalVisible = false;\n    }\n    // other JS methods hered\n  },\n\n  created() {\n    let api_serv = new APIService();\n    api_serv\n      .getFavThings(this.category.id, localStorage.user_id)\n      .then(res => {\n        if (res.data.code == \"010\") {\n          this.favorites = res.data.favThings;\n        }\n      })\n      .catch(err => {\n        console.log(err);\n      });\n  }\n};\n</script>\n\n<style scoped>\n.category-item {\n  background: #ffffff;\n  padding: 10px;\n  padding-left: 20px;\n  border: 1px rgb(21, 156, 235);\n}\n.btn {\n  border-color: rgb(21, 156, 235);\n  color: rgb(21, 156, 235);\n  margin: 5px;\n}\n.btn:hover {\n  background-color: rgb(21, 156, 235);\n  color: white;\n}\n</style>\n"]}]}